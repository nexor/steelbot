<?php

/**
 * Логирование сообщений для SteelBot
 * 
 * @author N3x^0r
 * @version 1.0
 * 
 * 2010-04-25
 *
 */

include_once dirname(__FILE__)."/../const/log_codes.php";
include_once dirname(__FILE__)."/../interfaces/isteelbotlog.interface.php";

class BaseLog{
    
   private $buffer = array(),
          $buffer_size = 30,
          $last_ignored = false;

   public function __construct($bufferSize = 30) {
		$this->buffer_size = $bufferSize;
   }
   
   
   public function add($name, $msg, $code = '000', $sender = false, $level = LOG_LEVEL_NOTICE) {
       if (!$this->checkRule($name, $level, $code)) {
		   $this->last_ignored = true;
           return;
       }
       $this->last_ignored = false;
       
       $date = date( SteelBot::$cfg['log.dateformat'] );       
       $logmsg = $this->format($date, $sender, $msg, $name, $code);

       if ( count ($this->buffer) > $this->buffer_size) {
           $this->save();           
           $this->buffer = array();
       }      
       $this->buffer[] = $logmsg;

       if (strlen($name) < 8) {
		  $offset = 8-strlen($name);
	   } else {
		  $offset = 1;
	   }
       $logmsg = $this->format($date, $sender, $msg, $name.@str_repeat(' ', $offset), '');
       echo "\n".$logmsg;
       return true;     
       
   }

   /**
    *
    * @param srting $date
    * @param string $name
    * @param string $msg
    * @param string $code
    * @param string $sender
    */
   public function format($date, $name, $msg, $code, $sender) {
	   //return "$date=$sender=$msg=$name=$code";	
       return str_replace( array('%d', '%u', '%m', '%n', '%c'),
                              array($date, $sender, $msg, $name, $code), 
                                SteelBot::$cfg['log.msgformat'] );
   }

   /**
    *
    * @param string $res
    */
   public function result($res) {       
	   if ($this->last_ignored) return;
       $index = count($this->buffer);
       if ($index>0) {
           $index--;         
           $this->buffer[$index] = $this->buffer[$index].$res;
           echo $res;
         
       }
       return true;
   }
   
   public function save($prefix = '_') {
       $filename = STEELBOT_DIR.DIRECTORY_SEPARATOR.'logs'.DIRECTORY_SEPARATOR.
        $prefix.'.'.date(SteelBot::$cfg['log.filename_format']).".log";
       if ($f = fopen($filename, "a+") ) {
           $date = date( SteelBot::$cfg['log.dateformat'] ); 
           $msg = "Saving log... ";      
           $logmsg = $this->format($date, 'logger', $msg, ' ', ' ');
		   if ($this->checkRule('logger', LOG_LEVEL_NOTICE)) {
               echo "\n".$logmsg;
		   }
           
           foreach ($this->buffer as $msg) {
                   fputs($f, $msg."\n");
           }
           fclose($f);
           return true;
               
       } else {
			   if ($this->checkRule('logger', LOG_LEVEL_ERROR)) {
                  echo "[logger] error: can't open $filename\n";
			   }
               return false;
       }    
   }

   private function checkRule($name, $level, $code = '000') {
		if (in_array($code, SteelBot::$cfg['log.exclude_types'])) {
           return false;
        } elseif (isset(SteelBot::$cfg['log.rules'][$name]) ) {
			if (SteelBot::$cfg['log.rules'][$name] < $level) {
				return false;
			} else {
				return true;
			}
		} elseif (SteelBot::$cfg['log.rules']['*'] < $level) {
			return false;
		}
		return true;
   }
    
}

